#!/usr/bin/env bash
# 
# Input is dir called FILENAME.SHA256HASH.parts, verify it ends in parts, then
# get hash from filename, get original filename. Reassemble file as FILENAME
# from .part files. hash it and compare with filename hash. Delete dir from input
# Before deleting the original, verify concatting parts reproduces it


outdir="$(dirname $1)/$(basename $1)"

[[ $outdir != *.parts ]] && printf "Error: Input must be a dir ending in '.parts'\n" && exit 1;


if [[ -f "$outdir/.gitmodules" ]]; then
	echo "Trying submodule update..."
	cd $1
	git submodule update --init --recursive
	cd ../
fi


base_without_parts="$(basename $outdir .parts)"
filename_hash=${base_without_parts: -64}
base_without_hash="$(basename $outdir .$filename_hash.parts)"
filepath="$(dirname $outdir)/$base_without_hash"

if [[ -f "$outdir/.gitmodules" ]]; then
	printf "Assembling chunked submodules...\n"
	cat $outdir/chunk.*.parts/*.part > $filepath
else 
	printf "Assembling...\n"
	cat $outdir/*.part > $filepath
fi
printf "Done.\nChecking SHA256 sum...\n"

filehash="$(shasum -a 256 $filepath | awk '{print $1}')"   

printf "$filename_hash < hash from filename\n"
printf "$filehash < hash of newly assembled file\n" 
[[ $filename_hash != $filehash ]] && printf "Error: Hash of assembled file does not match hash in filename." && exit 1;

printf "\nCreated:\n$filepath\n"


